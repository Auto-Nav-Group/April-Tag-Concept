// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final Climb m_climb = new Climb();
    public final Targeting m_targeting = new Targeting();
    public final BallPickup m_ballPickup = new BallPickup();
    public final Feeder m_feeder = new Feeder();
    public final Launcher m_launcher = new Launcher();
    public final Drivetrain m_drivetrain = new Drivetrain();

// Joysticks
private final XboxController xboxController = new XboxController(4);
private final Joystick operatorRightJoy = new Joystick(2);
private final Joystick operatorLeftJoy = new Joystick(3);
private final Joystick rightJoy = new Joystick(1);
private final Joystick leftJoy = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("DumbDrive", new DumbDrive( m_drivetrain, operatorRightJoy, operatorLeftJoy ));
    SmartDashboard.putData("VelocityDrive", new VelocityDrive( m_drivetrain, operatorRightJoy, operatorLeftJoy ));
    SmartDashboard.putData("LocateTarget", new LocateTarget( m_drivetrain, m_targeting ));
    SmartDashboard.putData("BeltMove", new BeltMove( m_feeder ));
    SmartDashboard.putData("Fire", new Fire( m_feeder, m_launcher ));
    SmartDashboard.putData("ExtendClimber", new ExtendClimber( m_climb ));
    SmartDashboard.putData("RetractClimber", new RetractClimber( m_climb ));
    SmartDashboard.putData("ToggleGecko", new ToggleGecko( m_ballPickup, m_feeder ));
    SmartDashboard.putData("SmartLauncher", new SmartLauncher( m_launcher, m_targeting ));
    SmartDashboard.putData("GeckoDown", new GeckoDown( m_ballPickup ));
    SmartDashboard.putData("GeckoUp", new GeckoUp( m_ballPickup, m_feeder ));
    SmartDashboard.putData("ArcadeDrive", new ArcadeDrive( m_drivetrain, xboxController ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton geckoDownBtn = new JoystickButton(operatorRightJoy, 11);        
geckoDownBtn.whenPressed(new GeckoDown( m_ballPickup ) ,true);
    SmartDashboard.putData("geckoDownBtn",new GeckoDown( m_ballPickup ) );

final JoystickButton geckoUpBtn = new JoystickButton(operatorRightJoy, 4);        
geckoUpBtn.whenPressed(new GeckoUp( m_ballPickup, m_feeder ) ,true);
    SmartDashboard.putData("geckoUpBtn",new GeckoUp( m_ballPickup, m_feeder ) );

final JoystickButton retractClimberBtn = new JoystickButton(operatorRightJoy, 3);        
retractClimberBtn.whenPressed(new RetractClimber( m_climb ) ,true);
    SmartDashboard.putData("retractClimberBtn",new RetractClimber( m_climb ) );

final JoystickButton extendClimberBtn = new JoystickButton(operatorRightJoy, 5);        
extendClimberBtn.whenPressed(new ExtendClimber( m_climb ) ,true);
    SmartDashboard.putData("extendClimberBtn",new ExtendClimber( m_climb ) );

final JoystickButton toggleGeckoBtn = new JoystickButton(operatorRightJoy, 6);        
toggleGeckoBtn.whenPressed(new ToggleGecko( m_ballPickup, m_feeder ) ,true);
    SmartDashboard.putData("toggleGeckoBtn",new ToggleGecko( m_ballPickup, m_feeder ) );

final JoystickButton locateTargetBtn = new JoystickButton(operatorRightJoy, 1);        
locateTargetBtn.whileHeld(new LocateTarget( m_drivetrain, m_targeting ) ,true);
    SmartDashboard.putData("locateTargetBtn",new LocateTarget( m_drivetrain, m_targeting ) );

final JoystickButton disableLauncherBtn = new JoystickButton(operatorLeftJoy, 12);        
disableLauncherBtn.whenPressed(new DisableLauncher( m_launcher, m_feeder ) ,true);
    SmartDashboard.putData("disableLauncherBtn",new DisableLauncher( m_launcher, m_feeder ) );

final JoystickButton enableLauncherBtn = new JoystickButton(operatorLeftJoy, 11);        
enableLauncherBtn.whenPressed(new EnableLauncher( m_launcher, m_feeder ) ,true);
    SmartDashboard.putData("enableLauncherBtn",new EnableLauncher( m_launcher, m_feeder ) );

final JoystickButton fireBtn = new JoystickButton(operatorLeftJoy, 1);        
fireBtn.whileHeld(new Fire( m_feeder, m_launcher ) ,true);
    SmartDashboard.putData("fireBtn",new Fire( m_feeder, m_launcher ) );

final JoystickButton locateBtn = new JoystickButton(leftJoy, 1);        
locateBtn.whileHeld(new LocateTarget( m_drivetrain, m_targeting ) ,true);
    SmartDashboard.putData("locateBtn",new LocateTarget( m_drivetrain, m_targeting ) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getleftJoy() {
        return leftJoy;
    }

public Joystick getrightJoy() {
        return rightJoy;
    }

public Joystick getoperatorLeftJoy() {
        return operatorLeftJoy;
    }

public Joystick getoperatorRightJoy() {
        return operatorRightJoy;
    }

public XboxController getxboxController() {
      return xboxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  public Command getTeleopCommand(){
      return new ArcadeDrive(m_drivetrain, xboxController);
  }
  

}

