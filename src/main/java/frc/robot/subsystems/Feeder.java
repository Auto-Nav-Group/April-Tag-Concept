// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Relay;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Relay.Value;

/**
 *
 */
public class Feeder extends SubsystemBase 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    
    private CANSparkMax feederMotor;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private DigitalInput m_feedSensor;
    private DigitalInput m_beltSensor;
    private Relay beltMotor;

    private boolean m_isFiring;
    private boolean m_isIngesting;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Feeder() 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		m_feedSensor = new DigitalInput(0);
		addChild("feedSensor",m_feedSensor);
		
		m_beltSensor = new DigitalInput(1);
		addChild("beltSensor",m_beltSensor);
		
		beltMotor = new Relay(0);
        addChild("beltMotor",beltMotor);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        feederMotor = new CANSparkMax(8, MotorType.kBrushless);
    }

    @Override
    public void periodic() 
    {
        // This method will be called once per scheduler run

        if(m_isFiring)
        {
            feedOn();
            beltOn();
        }
        else if(m_isIngesting)
        {
            smartBelt();
        }
        else
        {
            feedOff();
            beltOff();
        }
    }

    @Override
    public void simulationPeriodic() 
    {
        // This method will be called once per scheduler run when in simulation
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
	private void feedOn()
    {
        feederMotor.set(1);
    }

    private void feedOff()
    {
        feederMotor.set(0);
    }

    private void beltOn()
    {
        beltMotor.set(Value.kForward);
    }

    private void beltOff()
    {
        beltMotor.set(Value.kOff);
    }

    private void smartBelt()
    {
        if(m_feedSensor.get())
        {
            beltOn();
            feedOn();
        }
        else
        {
            if(m_beltSensor.get())
            {
                beltOn();
                feedOff();
            }
            else
            {
                beltOff();
                feedOff();
            }
        }
    }
    
    public void fire(boolean isFiring)
    {
        m_isFiring = isFiring;
    }

    public void ingest(boolean isIngesting)
    {
        m_isIngesting = isIngesting;
    }
}
