// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.classes.FeederSensor;
import frc.robot.classes.FeederSensor.SensorState;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.Relay.Value;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Relay;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Feeder extends Subsystem {

    private final int MAX_BALL_LIMIT = 5;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
private CANSparkMax feederMotor;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private DigitalInput sh;
private DigitalInput ss;
private Relay beltMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // private FeederSensor sensorHopper;
    // private FeederSensor sensorLauncher;
    private int ballCount = 3;

    public Feeder() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
sh = new DigitalInput(0);
addChild("sh",sh);

        
ss = new DigitalInput(1);
addChild("ss",ss);

        
beltMotor = new Relay(1);
addChild("beltMotor",beltMotor);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
feederMotor = new CANSparkMax(7, MotorType.kBrushless);
        // sensorHopper = new FeederSensor(sh);
        // sensorLauncher = new FeederSensor(ss);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    //    sensorHopper.update();
    //    sensorLauncher.update();
       

    //    //Check if a ball has entered the hopper
    //    if(sensorHopper.getState() == SensorState.RISING){
    //        ballCount++;
    //    }

    //    //Check if a ball has left the launcher
    //    if(sensorLauncher.getState() == SensorState.FALLING){
    //        ballCount--;
    //    }

    //    if(ballCount > MAX_BALL_LIMIT){ //Too many balls in the system!`
    //         //PURGE
    //         System.out.println("Too Many balls in system: " + ballCount);
    //         feederMotor.set(1);
    //    }

    //    if(ballCount < 0){ //Counting error something went wrong
    //         System.out.println("Invalid number of balls: " + ballCount + ". Set ballcount to 0.");
    //         ballCount = 0;
    //    }
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public void feedOn(){
     feederMotor.set(1);
     
    }
    public void feedOff(){
        feederMotor.set(0);
    }
 
    public int getBallCount(){
        return ballCount;
    }
    public void beltMovement(){
        if(ss.get()){
            beltMotor.set(Value.kOff);
        }

        else{
            beltMotor.set(Value.kForward);
        }
    }
    public void beltOn(){
        beltMotor.set(Value.kForward);
    }
    public void beltOff(){
        beltMotor.set(Value.kOff);
    }
}
    
