// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import static frc.robot.Constants.LauncherConstants.*;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class LauncherController extends SubsystemBase 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private enum LauncherState
    {
        GREEN, 
        YELLOW,
        BLUE,
        RED,
        OFF
    }

    private LauncherState m_launcherState;
    private Launcher m_launcher;

    /**
    *
    */
    public LauncherController(Launcher launcher) 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_launcherState = LauncherState.OFF;
        m_launcher = launcher;
    }

    @Override
    public void periodic() 
    {
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic()
    {
        // This method will be called once per scheduler run when in simulation
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void toggleGreenZone()
    {
        //Check if current state is already Green 
        if(LauncherState.GREEN == m_launcherState)
        {
            //Current state is already Green, turn off
            m_launcherState = LauncherState.OFF;
            m_launcher.stop();
        }
        else
        {
            //Current state is not green, turn to green
            m_launcherState = LauncherState.GREEN;
            m_launcher.setRpm(GREEN_ZONE_RPM);
        }
    }

    public void toggleYellowZone()
    {
        //Check if current state is already Yellow 
        if(LauncherState.YELLOW == m_launcherState)
        {
            //Current state is already Yellow, turn off
            m_launcherState = LauncherState.OFF;
            m_launcher.stop();
        }
        else
        {
            //Current state is not Yellow, turn to Yellow
            m_launcherState = LauncherState.YELLOW;
            m_launcher.setRpm(YELLOW_ZONE_RPM);
        }
    }
    
    public void toggleBlueZone()
    {
        //Check if current state is already Blue 
        if(LauncherState.BLUE == m_launcherState)
        {
            //Current state is already Blue, turn off
            m_launcherState = LauncherState.OFF;
            m_launcher.stop();
        }
        else
        {
            //Current state is not Blue, turn to Blue
            m_launcherState = LauncherState.BLUE;
            m_launcher.setRpm(BLUE_ZONE_RPM);
        }
    }
    
    public void toggleRedZone()
    {
        //Check if current state is already Red 
        if(LauncherState.RED == m_launcherState)
        {
            //Current state is already Red, turn off
            m_launcherState = LauncherState.OFF;
            m_launcher.stop();
        }
        else
        {
            //Current state is not Red, turn to Red
            m_launcherState = LauncherState.RED;
            m_launcher.setRpm(RED_ZONE_RPM);
        }
    }

    public void setOff()
    {
        m_launcherState = LauncherState.OFF;
        m_launcher.stop();  
    }
}
