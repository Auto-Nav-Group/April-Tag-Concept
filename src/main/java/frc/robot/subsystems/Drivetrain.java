// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package frc.robot.subsystems;

import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.classes.SPIKE293Utils;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.kauailabs.navx.frc.AHRS;
import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import static frc.robot.Constants.DrivetrainConstants.*;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drivetrain extends SubsystemBase 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonFX leftTalonLead;
    private WPI_TalonFX leftTalonFollower;
    private WPI_TalonFX rightTalonLead;
    private WPI_TalonFX rightTalonFollower;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private AHRS navX;

    public Drivetrain() 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftTalonLead = new WPI_TalonFX(LEFT_LEAD_TALON_CAN_ID);
        leftTalonFollower = new WPI_TalonFX(LEFT_FOLLOWER_TALON_CAN_ID);
        rightTalonLead = new WPI_TalonFX(RIGHT_LEAD_TALON_CAN_ID);
        rightTalonFollower = new WPI_TalonFX(RIGHT_FOLLOWER_TALON_CAN_ID);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        leftTalonLead.clearStickyFaults();
        leftTalonFollower.clearStickyFaults();
        rightTalonLead.clearStickyFaults();
        rightTalonFollower.clearStickyFaults();

        //Set facotry defaults for onboard PID
        leftTalonLead.configFactoryDefault();
        rightTalonLead.configFactoryDefault();
        
        leftTalonFollower.follow(leftTalonLead);
        rightTalonFollower.follow(rightTalonLead);

        leftTalonLead.setInverted(true);
        leftTalonFollower.setInverted(InvertType.FollowMaster);
        rightTalonLead.setInverted(true);
        rightTalonFollower.setInverted(InvertType.FollowMaster);

        leftTalonLead.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, 0, CONFIG_FEEDBACKSENSOR_TIMEOUT_MS);
        rightTalonLead.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, 0, CONFIG_FEEDBACKSENSOR_TIMEOUT_MS);

        //Configure PID 
        leftTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        leftTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);

        rightTalonLead.config_kF(PID_SLOT_ID, KF, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kP(PID_SLOT_ID, KP, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kI(PID_SLOT_ID, KI, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.config_kD(PID_SLOT_ID, KD, PID_CONFIG_TIMEOUT_MS);
        rightTalonLead.configClosedloopRamp(CLOSED_LOOP_RAMP);

        rightTalonLead.setNeutralMode(NeutralMode.Coast);
        leftTalonLead.setNeutralMode(NeutralMode.Coast);

        rightTalonLead.configNeutralDeadband(MOTOR_NEUTRAL_DEADBAND);
        rightTalonFollower.configNeutralDeadband(MOTOR_NEUTRAL_DEADBAND);
        leftTalonLead.configNeutralDeadband(MOTOR_NEUTRAL_DEADBAND);
        leftTalonFollower.configNeutralDeadband(MOTOR_NEUTRAL_DEADBAND);
        
        //Setup Gyro
        navX = new AHRS(Port.kMXP);

    }

    @Override
    public void periodic() 
    {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Left Encoder Velocity (Ft/S)", SPIKE293Utils.controllerVelocityToFeetPerSec(leftTalonLead.getSensorCollection().getIntegratedSensorVelocity()));
        SmartDashboard.putNumber("Left Encoder Position (Ft)", SPIKE293Utils.controllerUnitsToFeet(leftTalonLead.getSensorCollection().getIntegratedSensorPosition()));
        SmartDashboard.putNumber("Right Encoder Velocity (Ft/S)", SPIKE293Utils.controllerVelocityToFeetPerSec(rightTalonLead.getSensorCollection().getIntegratedSensorVelocity()));
        SmartDashboard.putNumber("Right Encoder Position (Ft)", SPIKE293Utils.controllerUnitsToFeet(rightTalonLead.getSensorCollection().getIntegratedSensorPosition()));

        SmartDashboard.putNumber("NavX Heading", navX.getAngle());
        SmartDashboard.putNumber("NavX Heading", navX.getFusedHeading());
    }
    
    //Sets the motors to run at a given percentage output, does NOT use onboard PID
    public void percentDrive(double leftPercentage, double rightPercentage) 
    {
        SmartDashboard.putNumber("Percentage Left", leftPercentage);
        SmartDashboard.putNumber("Percentage Right", rightPercentage);
        leftTalonLead.set(TalonFXControlMode.PercentOutput, leftPercentage);
        rightTalonLead.set(TalonFXControlMode.PercentOutput, rightPercentage);
    }


    //Sets the motors to encoder units per desisec (100ms), uses the onboard motor PID
    public void velocityDrive(double vL, double vR)
    {
        SmartDashboard.putNumber("Desired Velocity Left (Encoder units/100ms)", vL);
        SmartDashboard.putNumber("Desired Velocity Right (Encoder units/100ms)", vR);
        leftTalonLead.set(TalonFXControlMode.Velocity, vL);
        rightTalonLead.set(TalonFXControlMode.Velocity, vR);
    }

    // Stops motor usually used after the drive command ends to prevent shenanigans
    public void stop() 
    {
        leftTalonLead.set(TalonFXControlMode.Current, 0);
        rightTalonLead.set(TalonFXControlMode.Current, 0);
    }
}
